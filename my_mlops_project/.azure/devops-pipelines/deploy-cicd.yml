# This Azure Pipeline sets up CI/CD workflows for a previously instantiated MLOps Stacks Project.

trigger: none

variables:
  - group: my_mlops_project variable group

parameters:
  - name: ProjectName
    displayName: Name of the project to deploy CI/CD for.
    default: my_mlops_project
    type: string

jobs:
  - job: DeployCICD
    displayName: 'Deploy CI/CD'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/v0.212.2/install.sh | sh   
      displayName: 'Install Databricks CLI'          

    # Extract Databricks version to test installation
    - script: |
        databricks version
      displayName: 'Get Databricks CLI version'

    # Convert Project Name to Only Alphanumeric Characters
    - script: |
        projectNameAlpha=$(echo "${{ parameters.ProjectName }}" | tr ' -' '_')
        echo "##vso[task.setvariable variable=PROJECT_NAME_ALPHA]$projectNameAlpha"
      displayName: 'Convert Project Name to Only Alphanumeric Characters'

    # Install jq
    - script: |
        sudo apt-get install jq
      displayName: 'Install jq'

    # Unzip Bundle and Append Parameters to Input JSON
    - script: |
        tar -xzvf cicd.tar.gz
        INPUT_CLOUD_1=$(jq -r '.input_cloud' cicd_params.json)
        INPUT_CLOUD_2=$(jq -r '.input_cloud' "$(PROJECT_NAME_ALPHA)/project_params.json")
        if [ "$INPUT_CLOUD_1" != "$INPUT_CLOUD_2" ]; then
          printf "Error: CICD cloud '%s' does not match project cloud '%s'\n" "$INPUT_CLOUD_1" "$INPUT_CLOUD_2"
          exit 1
        fi
        printf '%s' "$(jq '. += {"input_project_name":"${{ parameters.ProjectName }}"}' cicd_params.json)" > cicd_params.json
        printf '%s' "$(jq -s '.[0] + .[1]' cicd_params.json $(PROJECT_NAME_ALPHA)/project_params.json)" > cicd_params.json
      displayName: 'Extract CICD Bundle and Update Parameters'        

    # Update databricks.yml
    - script: |
        echo -e "  staging:\n    workspace:\n      host: https://adb-xxxx.xx.azuredatabricks.net\n\n  prod:\n    workspace:\n      host: https://adb-xxxx.xx.azuredatabricks.net\n\n  test:\n    workspace:\n      host: https://adb-xxxx.xx.azuredatabricks.net" >> "$(PROJECT_NAME_ALPHA)/databricks.yml"
      displayName: 'Update databricks.yml'

    # Initialize CICD Bundle
    - script: |
        databricks bundle init ./cicd --config-file "cicd_params.json"
      displayName: Initialize CI/CD Bundle
      env:
        DATABRICKS_HOST: https://adb-xxxx.xx.azuredatabricks.net
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)

    # Create Branch and Commit CICD Bundle
    - script: |
        git config --global user.name "Deploy CICD Bot"
        git config --global user.email "noreply-cicd-bot@databricks.com"
        git checkout -b add-cicd-for-${{ parameters.ProjectName }}
        git add .azure "$(PROJECT_NAME_ALPHA)/databricks.yml"
        git commit -m "Add CICD for ${{ parameters.ProjectName }}"
        git push --force-with-lease origin add-cicd-for-${{ parameters.ProjectName }}
      displayName: Push CICD Bundle to a New Branch

    # Create Pull Request
    - script: |
        echo Creating Pull Request...
        PR_DATA="{\"sourceRefName\":\"refs/heads/add-cicd-for-${{ parameters.ProjectName }}\",\"targetRefName\":\"refs/heads/main\",\"title\":\"Deploy CICD for ${{ parameters.ProjectName }}\",\"description\":\"This PR was generated by the Deploy CICD workflow.\",\"reviewers\":[]}"
        PR_RESPONSE=$(curl -X POST -H "Content-Type: application/json" -d "$PR_DATA" -u :$(System.AccessToken) "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=6.0")
        echo $PR_RESPONSE
      displayName: 'Create Pull Request'
      env:
        System.AccessToken: $(System.AccessToken)

    
